display_name=Pool
short_description=Creates a pool for a given Javelin connector. | A {{Reference}}Pool{{-Reference}} is a set of preloaded Convertigo contexts on a defined connector. \n\
When the Convertigo engine starts, the pool's contexts are loaded, executing a {{Produit/Fonction}}starting transaction{{-Produit/Fonction}} defined in the properties. \n\
Thanks to the execution of the {{Produit/Fonction}}starting transaction{{-Produit/Fonction}}, the pool's contexts are led to a steady state. \n\
{{Orange Twinsoft}}Notes:{{-Orange Twinsoft}}***The steady state can be defined as a particular screen class that has to be reached by the connector ({{Reference}}Javelin screen class{{-Reference}}).\
***Defining a pool is useful for performance optimization, in that it allows accessing to pre-established and advanced connections with the host.
property.startTransaction.display_name=Starting transaction
property.startTransaction.short_description=Defines the transaction to be automatically executed when loading the Convertigo context. | This transaction must lead the connector to a steady state (a particular screen class).
property.startTransactionVariables.display_name=Starting transaction variables
property.startTransactionVariables.short_description=Defines the starting transaction variables. | This property allows to define a list of variables that will be sent to the starting transaction executed on each context. \n\
For each variable, you have to describe three properties:\
***{{Produit/Fonction}}Context number{{-Produit/Fonction}}: number between 1 and the size of the pool (defined in the the {{Produit/Fonction}}Number of contexts{{-Produit/Fonction}} property). The variable will be sent with the associated value only for this context number. To define a variable for all loaded contexts, this property can take the following value: {{Computer}}*{{-Computer}}.\
***{{Produit/Fonction}}Parameter name{{-Produit/Fonction}}: name of the variable.\
***{{Produit/Fonction}}Parameter value{{-Produit/Fonction}}:value of the variable.
property.numberOfContexts.display_name=Number of contexts
property.numberOfContexts.short_description=Defines the size of the pool. | This property defines the number of contexts to load for this pool. 
property.initialScreenClass.display_name=Initial screen class
property.initialScreenClass.short_description=Defines the steady state screen class. | On connectors for which it applies ({{Reference}}Javelin connector{{-Reference}}), this property allows to define the steady state screen class.\n\
This initial screen class has several implications: \
***it's the screen class that must be reached by the context thanks to the {{Produit/Fonction}}starting transaction{{-Produit/Fonction}} execution,\
***the transactions that are executed thereafter on one of the pool's contexts must lead back to this screen class to let the context in steady state for a further use.\n\
If you want to realize non-atomic calls, i.e. call several successive transactions on the same context without restoring the context's steady state between calls, it is possible to lock the context by setting the {{Computer}}context.lockPooledContext{{-Computer}} property to {{Computer}}true{{-Computer}}.\n\
{{Orange Twinsoft}}Note:{{-Orange Twinsoft}} be sure to reset the {{Computer}}context.lockPooledContext{{-Computer}} property to {{Computer}}false{{-Computer}} at the end of your non atomic calls, otherwise this locked context will remain unavailable.
property.serviceCode.display_name=Connection address
property.serviceCode.short_description=Replaces the connection address (optional). | If defined, this property overrides the connection address set as connector parameter for the loaded contexts.
property.connectionsParameter.display_name=Connections parameter (deprecated)
property.connectionsParameter.short_description=Replaces the connector's connection parameters. (deprecated) | Defining such parameters is useful in the Carioca Minime environment. (deprecated)