display_name=Get nodes
short_description=Extracts nodes from current HTML into a variable in JavaScript scope. | The {{Reference}}Get nodes{{-Reference}} statement extracts a list of nodes from the Web page DOM and sets a JavaScript variable in the current executed transaction JavaScript scope. This variable contains a {{Computer}}Java NodeList{{-Computer}} object, i.e. a list of XML nodes, extracted from the HTML page thanks to the execution of an XPath on the page DOM. This XPath is defined in {{Produit/Fonction}}XPath{{-Produit/Fonction}} property.\n\
The variable is named after the {{Produit/Fonction}}Variable name{{-Produit/Fonction}} property value. It exists while the transaction is running.\n\
If only one node matches, the variable is also a {{Computer}}NodeList{{-Computer}} containing only one {{Computer}}Node{{-Computer}} (index is 0). If no node matches, the variable is finally an empty {{Computer}}NodeList{{-Computer}}, containing no {{Computer}}Node{{-Computer}} ({{Computer}}var_name.getLength() = 0{{-Computer}}). \n\
{{Orange Twinsoft}}Notes:{{-Orange Twinsoft}} ***The variable contains a list of node elements of the DOM. To access one ({{Computer}}Node{{-Computer}}) of the list, use the following syntax in a statement: {{Computer}}var_name.item(index){{-Computer}}.\
***To access one element's text content ({{Computer}}String{{-Computer}}), use the {{Computer}}element.getTextContent(){{-Computer}} method, to retrieve the text of the element, or the {{Computer}}element.getNodeValue(){{-Computer}} method, which result depends on the node type (will extract a text only if the {{Computer}}Node{{-Computer}} is of {{Computer}}Text{{-Computer}} or {{Computer}}Attribute{{-Computer}} type).
property.variableName.display_name=Variable name
property.variableName.short_description=Defines the name of the JavaScript variable. | If this variable exists in scope, its value is overridden. If the variable doesn't exist in scope, it is created.
