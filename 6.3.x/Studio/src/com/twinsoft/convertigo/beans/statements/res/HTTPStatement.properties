display_name=HTTP request
short_description=Sends an HTTP request. | This statement simulates an HTTP {{Computer}}POST{{-Computer}} or {{Computer}}GET{{-Computer}} request on the target application.\n\
{{Orange Twinsoft}}Note:{{-Orange Twinsoft}} You can add {{Reference}}HTTP statement variable{{-Reference}} objects to this statement, they will be sent as HTTP request parameters (for more information see {{Reference}}HTTP single-valued variable{{-Reference}} and {{Reference}}HTTP multi-valued variable{{-Reference}} documentation).
property.https.display_name=Is HTTPS
property.httpVerb.display_name=HTTP verb
property.httpVerb.short_description=Allows to choose the HTTP verb to use for this HTTP request: {{Computer}}GET{{-Computer}}, {{Computer}}POST{{-Computer}}, {{Computer}}PUT{{-Computer}}, {{Computer}}DELETE{{-Computer}}, {{Computer}}HEAD{{-Computer}}, {{Computer}}TRACE{{-Computer}}, {{Computer}}OPTIONS{{-Computer}} or {{Computer}}CONNECT{{-Computer}}. | For more information about HTTP verbs, you can visit the following RFC page: {{Reference}}http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html{{-Reference}}.property.https.display_name=Is HTTPS
property.https.short_description=Defines whether the connection is secured (HTTPS).
property.port.display_name=Port
property.port.short_description=Defines the server port. | By default, {{Reference}}HTTP request{{-Reference}} statements use the {{Produit/Fonction}}Port{{-Produit/Fonction}} property set in the connector object. This property can be overridden by setting the {{Produit/Fonction}}Port{{-Produit/Fonction}} property here. 
property.host.display_name=Host
property.host.short_description=Defines the host address. | By default, {{Reference}}HTTP request{{-Reference}} statements use the {{Produit/Fonction}}Host{{-Produit/Fonction}} property set in the connector object. This property can be overridden by setting the {{Produit/Fonction}}Host{{-Produit/Fonction}} property here. \n\
The {{Produit/Fonction}}Host{{-Produit/Fonction}} property can contain a DNS host name or be a simple IP address. 
property.requestUri.display_name=URI
property.requestUri.short_description=Defines as a JavaScript expression the URI to be used in the HTTP request. | This property is a JavaScript expression that is evaluated during the transaction execution and gives the URI string to be used in the HTTP request.
property.headers.display_name=HTTP headers
property.headers.short_description=Defines the HTTP headers to be used in the HTTP request. | This property allows the user to define specific HTTP headers for the HTTP request.\n\
Each header is defined with the following items:\
***Variable: HTTP header name (ex: {{Computer}}Content-Type{{-Computer}}).\
***Value: HTTP header value (ex: {{Computer}}application/x-www-from-urlencoded{{-Computer}}). 
property.form.display_name=Form
property.form.short_description=Defines the HTML form associated with the statement, if applicable. | 
property.trigger.display_name=Synchronization
property.trigger.short_description=Defines how to synchronize the statement. | A synchronizer states how and when accessed pages are considered fully loaded. Only then are data extracted and new pages re-detected. \n\
There are several types of synchronizers, that are described hereafter:\
***{{Computer}}Document completed{{-Computer}}: The synchronizer waits for a number of documents to be completed. Specify here how many "document completed" events Convertigo has to wait for before assuming that the page is complete. \
In many cases, when the target application uses HTTP META redirects or JavaScript redirects, the document is loaded several times. You can monitor \n\
{{Computer}}==== start parse ======{{-Computer}}\n\
and\n\
{{Computer}}==== Parse end ==(XXXms )===================={{-Computer}}\n\
traces in the Engine console (debug mode) to count the number of "document completed" events needed for the synchronizer. \
The {{Computer}}Document completed{{-Computer}} synchronizer can be configured to also stop on alert messages that could pop up. Alert messages do not trigger a "document completed" event and are not detected by this synchronizer. To activate this option, check the {{Produit/Fonction}}Stop on alert{{-Produit/Fonction}} checkbox. \
***{{Computer}}XPath{{-Computer}}: The synchronizer waits until a specified XPath is found. Convertigo tries to evaluate the specified XPath while receiving a Web page or executing JavaScript in it. Once the XPath matches at least one node of the page, the synchronizer returns. \
***{{Computer}}Wait time{{-Computer}}: The synchronizer waits until a specified time is reached (in ms, set via the {{Produit/Fonction}}Timeout{{-Produit/Fonction}} property). \
***{{Computer}}Screen Class{{-Computer}}: The synchronizer waits for one of the selected screen classes to be detected. Several screen classes can be selected to be waited for. The synchronizer returns when one of them is reached. \
***{{Computer}}Download started{{-Computer}}: The synchronizer waits for a download request. This is the perfect synchronizer to use before a {{Produit/Fonction}}Get attachment{{-Produit/Fonction}} statement. \
***{{Computer}}No wait{{-Computer}}: The synchronizer doesn't wait and execution proceeds directly. \n\
For all synchronizer types, the maximum waiting time is set using the {{Produit/Fonction}}Timeout{{-Produit/Fonction}} property.
property.urlEncodingCharset.display_name=Url Encoding Charset
property.urlEncodingCharset.short_description=Defines the charset encoding to use for URL encode GET parameters for the query string or the POST parameters in case of "application/x-www-form-urlencoded" content type. If blank, it will use the transaction {{Produit/Fonction}}Url Encoding Charset{{-Produit/Fonction}} value.