display_name=Inject JS in browser
short_description=Injects JavaScript code under the node matching the specified XPath. | This statement enables Convertigo to inject any JavaScript code in the target web page. It can then dynamically invoke any existing JavaScript code from the target page.\n\
The {{Reference}}Inject JS in browser{{-Reference}} statement dynamically creates a {{Computer}}SCRIPT{{-Computer}} tag under the node designated by the {{Produit/Fonction}}XPath{{-Produit/Fonction}} property, containing the JavaScript code specified by the {{Produit/Fonction}}JS code{{-Produit/Fonction}} property, and executes it.
property.codejs.display_name=JS code
property.codejs.short_description=Defines the JavaScript code to inject and invoke. | Any JavaScript expression that will be valid for the page currently accessed by the HTML connector. This script is dynamically added as a {{Computer}}SCRIPT{{-Computer}} tag under the node specified by the {{Produit/Fonction}}XPath{{-Produit/Fonction}} property and evaluated.\n\
For calling a JavaScript function already defined in the page, do it using this syntax: {{Computer}}functionToBeCalled();{{-Computer}}. You can also replace an existing JavaScript function by writing another JavaScript function with a similar name. This can be useful if a web site features JavaScript functions unsupported by Convertigo's Mozilla/Firefox HTML parser.\n\
You can also pass Convertigo variables to your JavaScript code by using the {{Produit/Fonction}}Variables{{-Produit/Fonction}} property. 
property.variables.display_name=Variables
property.variables.short_description=Declares and initializes variables from Convertigo in injected JavaScript code. | This property allows passing Convertigo transaction variables to the JavaScript code injected in the web page. These variables will be initialized with a value resulting from a JavaScript expression evaluated during the transaction (for example using transaction variables).\n\
These variables must be of standard types (for example {{Computer}}int{{-Computer}}, {{Computer}}string{{-Computer}}, etc.), complex types are not supported (for example {{Computer}}Array{{-Computer}} or {{Computer}}DOM{{-Computer}}).
