display_name=Parallel
short_description=Defines a step executing child steps in parallel. | A {{Reference}}Parallel{{-Reference}} step executes steps simultaneously in parallel contexts. The maximum number of contexts is set by the value of the {{Produit/Fonction}}Max. threads{{-Produit/Fonction}} property. \n\
Each child step is executed in a dedicated thread. When a child thread is completed, all of its resources are released. As a consequence, a step defined outside a {{Reference}}Parallel{{-Reference}} step cannot source any information from it.\n\
To do so, it is recommended that you:\
***create a {{Reference}}Complex{{-Reference}} step as a parent of the {{Reference}}Parallel{{-Reference}} step,\
***generate information from the {{Reference}}Parallel{{-Reference}} step into the {{Reference}}Complex{{-Reference}} step,\
***use the {{Reference}}Complex{{-Reference}} step as a source outside the {{Reference}}Parallel{{-Reference}} step.\n\
A {{Reference}}Parallel{{-Reference}} step is completed (i.e. the sequence will continue flow execution) when all child threads have been completed. This means the step following a {{Reference}}Parallel{{-Reference}} step starts right after all child threads have been completed.\n\
Convertigo contexts are created for each child step executed in parallel. These contexts are automatically named after parent {{Reference}}Parallel{{-Reference}} step properties.\n\
If {{Reference}}Call transaction{{-Reference}} or {{Reference}}Call sequence{{-Reference}} steps are child of a {{Reference}}Parallel{{-Reference}} step, contexts can be named after their {{Produit/Fonction}}Context{{-Produit/Fonction}} property or automatically if this property is not specified.\n\
Every automatically named context will be deleted after the {{Reference}}Parallel{{-Reference}} step execution is completed. Explicitly named contexts will remain for further transaction or sequence use.
