buildscript {
	repositories {
		jcenter()
	}
	
	dependencies {
		classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.10"
	}
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync
import org.apache.tools.ant.filters.ReplaceTokens
import groovy.xml.XmlUtil

apply from: 'headers.gradle'
apply from: 'changelog.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

ext.convertigoVersion = '7.6.6'
ext.convertigoTag = ''
ext.convertigoCodename = 'osmium'
ext.convertigoCode = 'Os'
ext.convertigoRevision = hasProperty('convertigoRevision') ? convertigoRevision : ''
ext.jxBrowserVersion = '6.23.1'
ext.swaggerUiVersion = '3.19.3'
ext.sapjco3Version = 'com.convertigo.lib:sapjco3:2019.09.20'

ext.convertigoEngineAPI = '7.6.5-SNAPSHOT'

ext.convertigoVersionFull = "${convertigoVersion}${convertigoTag.isEmpty() ? '' : '-' + convertigoTag}"
ext.currentYear = '' + Calendar.getInstance().get(Calendar.YEAR)

task updateVersion(dependsOn: [':engine:updateProductVersion', 'writeManifest', 'generateDockerfile']) {
	group 'convertigo'
	description 'Run this task after a Convertigo version change.'
}

eclipse {
	project {
		comment = 'Main project to develop the Convertigo platform'
	}
}

allprojects {
	version convertigoVersionFull
	
	repositories {
		mavenLocal()
		maven {
			url "https://m2.convertigo.com"
		}
		maven {
			url "https://europe-maven.pkg.dev/jxbrowser/releases"
		}
		jcenter()
	}
	
	if (project.name.startsWith('eclipse')) {
		apply plugin: 'eclipse'
	}
	
	if (project.name.startsWith('eclipse-plugin')) {
		apply plugin: 'java'
		
		sourceSets {
			main {
				java {
					exclude '.placeholder'
					srcDir 'src'
				}
				resources {
					exclude '.placeholder'
					srcDir 'src'
				}
			}
		}
		
		eclipse {
			project {
				natures 'org.eclipse.jdt.core.javanature',
						'org.eclipse.pde.PluginNature',
						'org.eclipse.buildship.core.gradleprojectnature'
				buildCommand 'org.eclipse.pde.ManifestBuilder'
				buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
			}
			
			classpath.file.withXml {
				def node = it.asNode()
				if (node.classpathentry.find { it.@path == 'org.eclipse.pde.core.requiredPlugins' } == null) {
					node.appendNode('classpathentry', [kind: 'con', path: 'org.eclipse.pde.core.requiredPlugins'])
				}
			}
		}
		
		task syncLib(type: Sync) {
			group 'convertigo'
			
			into 'lib'
			from configurations.runtime
			
			rename 'sapjco3.*jar', 'sapjco3.jar'
		}
		
		task cleanBin(type: Delete) {
			group 'convertigo'
			
			def f = file('bin')
			if (f.exists()) {
				f.eachFile {
					if (it.getName() != 'main') {
						delete it
					}
				}
			}
		}
	}
	
	plugins.withId('java') {
		compileJava.options.encoding = 'UTF-8'
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	}
	
	afterEvaluate {
		if (plugins.hasPlugin('maven-publish')) {
			publishing {
				repositories {
					maven {
						url project.properties['c8o.m2.url']
						credentials(AwsCredentials) {
							accessKey project.properties['c8o.m2.ak']
							secretKey project.properties['c8o.m2.sk']
						}
					}
				}
			}
		}
	}
}

publishing {
	publications {
		engineApi (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'convertigo-engine-api'
			version convertigoEngineAPI
			afterEvaluate {
				artifact project(':engine').engineApiJar
				pom.withXml {
					def dependencies = asNode().appendNode('dependencies')
					[
						'com.convertigo.twinsoft:api:2017.12.29',
						'com.convertigo.twinsoft:tas:2017.12.29',
						'com.convertigo.twinsoft:util:2017.12.29',
						'com.fasterxml.jackson.core:jackson-core:[2.8,2.9[',
						'commons-io:commons-io:[2.2,)',
						'javax.mail:mail:1.4',
						'javax.servlet:servlet-api:2.5',
						'log4j:log4j:[1.2,)',
						'org.apache.commons:commons-lang3:[3.4,)',
						'org.apache.httpcomponents:httpclient:[4.5,)',
						'org.codehaus.jettison:jettison:[1.3,)'
					].each {
						def values = it.split(':')
						def dependency = dependencies.appendNode('dependency')
						dependency.appendNode('groupId', values[0])
						dependency.appendNode('artifactId', values[1])
						dependency.appendNode('version', values[2])
					}
				}
			}
		}
		
		jxBrowserLicense (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'jxbrowser-license'
			version '2019.04.02'
			artifact 'resources/jxbrowser-license.jar'
		}
		
		ojdbc (MavenPublication) {
			groupId 'com.convertigo.lib'
			artifactId 'ojdbc7'
			version '12.1.0.2'
			artifact 'resources/ojdbc7.jar'
		}
	}
}

afterEvaluate {
	ext.sharedManifest = project(':engine').manifest {
		attributes(
			'Bundle-ManifestVersion': '2',
			'Bundle-Vendor': 'Convertigo',
			'Bundle-Version': "${convertigoVersion}.qualifier",
			'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
		)
	}
}

task writeManifest(dependsOn:  ['updateEclipseVersion', 'makeSplash']) {
	group 'convertigo'
	
	def wm = getTasksByName 'writeManifest', true
	wm.remove tasks['writeManifest']
	wm.each { it.dependsOn ':updateEclipseVersion' }
	dependsOn wm
}

task buildStudio32(type: Exec, dependsOn: ['writeManifest']) {
	group 'convertigo'
	
	onlyIf { !file('eclipse-repository/target/products').exists() }
	
	doFirst {
		file('pom.xml').bytes = file('pom-32.xml').bytes
		def featureFile = file('eclipse-feature/feature.xml')
		def featureTxt = featureFile.text
		featureFile.renameTo(file('eclipse-feature/feature-commons.xml'))
		featureTxt = (featureTxt =~ /(?s)<!--no win32-->.*?<!--\/no win32-->/).replaceAll('')
		featureFile.text = featureTxt
	}
	
	doLast {
		file('pom.xml').delete()
		file('eclipse-feature/feature-commons.xml').renameTo(file('eclipse-feature/feature.xml'))
	}
	
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'mvn'
	} else {
		commandLine 'mvn'
	}
	
	args 'clean', 'install'
}

task buildStudio(type: Exec, dependsOn: ['buildStudio32']) {
	group 'convertigo'
	
	def target32 = file('eclipse-repository/target/products/com.convertigo.studio/win32/win32/x86')
	def tmp32 = file('build/x86')
	
	doFirst {
		file('pom.xml').bytes = file('pom-commons.xml').bytes
		if (target32.exists()) {
			file('build').mkdirs()
			target32.renameTo(tmp32)
		}
	}
	
	doLast {
		file('pom.xml').delete()
		if (tmp32.exists()) {
			tmp32.renameTo(target32)
		}
	}
	
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine 'cmd', '/c', 'mvn'
	} else {
		commandLine 'mvn'
	}
	
	args 'install'
}

task updateEclipseProduct(type: Copy, dependsOn: ['updateEclipseCategory']) {
	group 'convertigo'
	
	def aboutTextFile = file('eclipse-plugin-product/aboutText.txt')
	def licenseTextFile = file('license.txt')
	
	inputs.properties(
		'currentYear': currentYear,
		'convertigoVersionFull': convertigoVersionFull
	)
	inputs.files aboutTextFile, licenseTextFile
	
	def aboutText = ''
	def licenseText = ''
	
	doFirst {
		def xml = new XmlSlurper().parseText('<elt/>')
		xml.replaceBody aboutTextFile.text
			.replace('@CEMS_VERSION@', convertigoVersionFull)
			.replace('@CURRENT_YEAR@', currentYear)
		aboutText = XmlUtil.serialize(xml).replaceFirst('[\\d\\D]*<elt>([\\d\\D]*)</elt>[\\d\\D]*','$1')
		
		xml.replaceBody licenseTextFile.text
		licenseText = XmlUtil.serialize(xml).replaceFirst('[\\d\\D]*<elt>([\\d\\D]*)</elt>[\\d\\D]*','$1')
	}
	
	from 'eclipse-repository/Convertigo.product.tpl'
	filter { it.replace('@aboutText@', aboutText).replace('@licenseText@', licenseText).replace('@convertigoVersion@', convertigoVersion) }
	into 'eclipse-repository'
	rename '.*', 'Convertigo.product'
}

task updateEclipseCategory(type: Copy) {
	group 'convertigo'
	
	inputs.properties(
		'convertigoVersion': convertigoVersion
	)
	
	from 'eclipse-repository/category.xml.tpl'
	filter { it.replace('@convertigoVersion@', convertigoVersion) }
	into 'eclipse-repository'
	rename '.*', 'category.xml'
}

task updateEclipseVersion(dependsOn: [':updateEclipseProduct', ':eclipse-plugin-product:writeAboutIni', ':eclipse-plugin-product:writePluginXml', ':eclipse-feature:updateFeature']) {
	group 'convertigo'
	doFirst {
		fileTree(dir: '.', include: '*/pom.xml').files.plus([file('pom-32.xml'), file('pom-commons.xml')]).each {
			it.text = it.text.replaceAll('(<!-- SET-VERSION -->\\s*<version>).*(</version>)', "\$1${convertigoVersion}-SNAPSHOT\$2")
		}
	}
}

task buildStudioClean(type: Delete) {
	group 'convertigo'
	
	delete 'eclipse-repository/target/products'
}

task generateEclipseConfiguration(dependsOn: [getTasksByName('cleanEclipse', true), getTasksByName('eclipse', true), getTasksByName('cleanBin', true)]) {
	group 'convertigo'
}

task generateEclipseConfigurationWithManifest(dependsOn: ['writeManifest', 'generateEclipseConfiguration']) {
	group 'convertigo'
}

task makeSplash(dependsOn: 'convertigo-splash:run') {
	group 'convertigo'
}

task ciFirstStep(dependsOn: [':convertigo-templates:buildTemplates', ':engine:jar']) {
	group 'convertigo'
}

task generateDockerfile {
	group 'convertigo'
	
	doLast {
		def base = file('docker/Dockerfile.tpl').text
		base = base.replace('%VERSION%', convertigoVersion)
		
		file('docker/default/Dockerfile').text = base.replace('%FROM%', 'tomcat:7-jdk8-openjdk')
		file('docker/default/docker-entrypoint.sh').text = file('docker/docker-entrypoint.sh').text
		file('docker/default/root-index.html').text = file('docker/root-index.html').text
		
		file('docker/slim/Dockerfile').text = base.replace('%FROM%', 'tomcat:7-jdk8-openjdk-slim')
		file('docker/slim/docker-entrypoint.sh').text = file('docker/docker-entrypoint.sh').text
		file('docker/slim/root-index.html').text = file('docker/root-index.html').text
		
		file('docker/openj9/Dockerfile').text = base.replace('%FROM%', 'tomcat:7-jdk8-adoptopenjdk-openj9')
		file('docker/openj9/docker-entrypoint.sh').text = file('docker/docker-entrypoint.sh').text
		file('docker/openj9/root-index.html').text = file('docker/root-index.html').text
	}
}