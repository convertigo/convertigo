group = 'com.convertigo'

apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'maven-publish'

publishing {
	publications {
		engineJar(MavenPublication) {
			version = version.replace('beta', 'SNAPSHOT')
			from components.java
		}
		dependenciesJar(MavenPublication) {
			version = version.replace('beta', 'SNAPSHOT')
			artifactId = 'dependencies'
			afterEvaluate {
				artifact tasks['dependenciesJar'].archiveFile
			}
		}
	}
	
	repositories {
		maven {
			url = project.properties['c8o.m2.url']
			credentials(AwsCredentials) {
				accessKey = project.properties['c8o.m2.ak']
				secretKey = project.properties['c8o.m2.sk']
			}
		}
	}
}


eclipse {
	project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
		linkedResource name: 'convertigo', type: '2', locationUri: 'PARENT-1-PROJECT_LOC/eclipse-plugin-studio/tomcat/webapps/convertigo'
		linkedResource name: 'src/com/twinsoft/convertigo/engine/plugins', type: '2', locationUri: 'PARENT-2-PROJECT_LOC/convertigo-provider-plugins/src/com/twinsoft/convertigo/engine/plugins'
		linkedResource name: 'src/com/twinsoft/convertigo/engine/providers/couchdb', type: '2', locationUri: 'PARENT-2-PROJECT_LOC/convertigo-provider-couchdb/src/com/twinsoft/convertigo/engine/providers/couchdb'
		linkedResource name: 'src/com/twinsoft/convertigo/engine/providers/sapjco', type: '2', locationUri: 'PARENT-2-PROJECT_LOC/convertigo-provider-sap/src/com/twinsoft/convertigo/engine/providers/sapjco'
	}

	wtp {
		component {
			contextPath = 'convertigo'
			deployName = 'convertigo'
			//resource sourcePath: 'convertigo', deployPath: '/'
			file {
				withXml {
					def node = it.asNode()
					if (node.'wb-module'.'wb-resource'.find { it['@deploy-path'] == '/' } == null) {
						node = node['wb-module'][0].appendNode('wb-resource')
						node['@source-path'] = 'convertigo'
						node['@deploy-path'] = '/'
					}
				}
			}
		}
	}
	
	classpath.file.withXml {
		def elt = it.asElement()
		def nl = elt.getElementsByTagName('classpathentry')
		for (def i = 0; i < nl.length; i++) {
			def entry = nl.item(i)
			if (entry.getAttribute('path').contains('libs/dependencies')) {
				entry.setAttribute('sourcepath', entry.getAttribute('path').replace('libs/dependencies', 'libs/dependencies-sources'))
				return
			}
		}
	}
}

tasks['eclipse'].dependsOn ':engine:dependenciesSourceJar'

configurations {
	compileFlat
	sapjco3
}

jar {
	archiveBaseName = 'convertigo-engine'
	include 'com/twinsoft/**'
	exclude 'com/twinsoft/beans/**/*.svg'
}

task dependenciesJar(type: Jar, dependsOn: ':patches:jar') {
	group = 'convertigo'
	
	zip64 = true
	archiveBaseName = 'dependencies'
	duplicatesStrategy = 'exclude'
	def allJars = file('build/tmp/allJars.txt')
	doFirst {
		def buf = []
		def substr = System.getProperty("user.home").length() + 1
		configurations.compileFlat.each {
			buf += it.toString().substring(substr)
		}
		buf.sort()
		allJars.text = buf.join('\n')
	}
	from {
		configurations.compileFlat.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	from allJars
	exclude 'org/w3c/dom/**', 'org/xml/sax/**', 'javax/xml/catalog/**', 'javax/xml/datatype/**', 'javax/xml/namespace/**'
	exclude 'javax/xml/parsers/**', 'javax/xml/stream/**', 'javax/xml/transform/**', 'javax/xml/validation/**'
	exclude 'javax/xml/xpath/**', 'javax/xml/XMLConstants.class'
	exclude 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/DEPENDENCIES'
	exclude 'META-INF/MANIFEST.MF', 'META-INF/INDEX.LIST', 'META-INF/EVIWARE.*', 'META-INF/license.txt'
	exclude 'META-INF/notice.txt', 'META-INF/README*', 'META-INF/spring*', 'overview.html', 'externs.zip'
	exclude 'META-INF/mailcap*', 'META-INF/MANIFEST.MF', 'META-INF/*.RSA', 'META-INF/*.DSA', 'META-INF/*.SF'
}

tasks['generatePomFileForDependenciesJarPublication'].dependsOn dependenciesJar
tasks['publishToMavenLocal'].dependsOn dependenciesJar
tasks['publish'].dependsOn dependenciesJar
compileJava.dependsOn dependenciesJar

war {
	webAppDirectory = file('convertigo')
	archiveBaseName = 'convertigo'
	
	classpath = files(configurations.runtimeClasspath, jar)
	
	doFirst {
		project.war.webAppDirectory = file('../eclipse-plugin-studio/tomcat/webapps/convertigo')
		file('build/tmp/build.txt').text = """\
build.version=${convertigoRevision}
build.date=${new Date().toString()}
build.filename=${war.archiveFileName.get()}"""
	}
	
	from 'build/tmp/build.txt', {
		into 'WEB-INF'
	}
	
	exclude '**/keys.txt'
	exclude '**/*.car'
	rename 'keys_server.txt', 'keys.txt'
	
	afterEvaluate {
		from configurations.sapjco3[0], {
			into 'WEB-INF/lib'
			rename '(.*)', 'sapjco3.jar'
		}
	}
	
	dependsOn 'unzipSwaggerUI'
}

sourceSets {
	main {
		java {
			exclude 'com/twinsoft/convertigo/engine/plugins/EnvoiSMSBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/InfogreffeBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/InseeBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/LCABiller.java'
			exclude '.placeholder'
			srcDirs = ['src']
		}
		resources {
			exclude 'com/twinsoft/convertigo/engine/plugins/EnvoiSMSBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/InfogreffeBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/InseeBiller.java'
			exclude 'com/twinsoft/convertigo/engine/plugins/LCABiller.java'
			exclude '.placeholder'
			srcDirs = ['src']
		}
	}
}

dependencies {
	implementation 'org.apache.logging.log4j:log4j-1.2-api:2.25.2'
	compileFlat    project(path: ':patches')
	compileFlat    ('org.apache.logging.log4j:log4j-core:2.25.2') {
		exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
	}
	compileFlat    'ca.juliusdavies:not-yet-commons-ssl:0.3.11'
	compileFlat    'com.convertigo.lib:ctgclient:2010.06.14'
	compileFlat    'com.convertigo.lib:httpclientAuthHelper:2014.12.23'
	compileFlat    'com.convertigo.lib:soapui-xmlbeans:3.5.1'
	compileFlat    'com.convertigo.lib:soapui:3.5.1'
	implementation 'com.convertigo.provider:convertigo-provider-couchdb:8.3.7'
	implementation('com.convertigo.provider:convertigo-provider-plugins:8.1.0-SNAPSHOT') {
		exclude group: 'xml-apis', module: 'xml-apis'
		exclude group: 'xalan', module: 'xalan'
	}	
	implementation 'com.convertigo.provider:convertigo-provider-sap:8.2.5'
	compileFlat    'com.convertigo.twinsoft.lib:aviva:2017.09.04'
	compileFlat    'com.convertigo.twinsoft.lib:comm:1998.11.15'
	compileFlat    'com.convertigo.twinsoft.lib:ms:2002.01.03'
	compileFlat    'com.convertigo.twinsoft.lib:netscape:2002.01.04'
	compileFlat    'com.convertigo.twinsoft.lib:phaos:1998.11.15'
	implementation 'com.convertigo.twinsoft:api:2017.12.29'
	compileFlat    'com.convertigo.twinsoft:ibm:2017.03.10'
	implementation 'com.convertigo.twinsoft:tas:2019.10.16'
	compileFlat    'com.convertigo.twinsoft:twinj:2016.05.09'
	compileFlat    'com.convertigo.twinsoft:ui:2009.06.15'
	implementation 'com.convertigo.twinsoft:util:2017.12.29'
	compileFlat    'com.fasterxml.jackson.core:jackson-core:2.20.0'
	compileFlat    'com.google.gcm:gcm-server:1.0.0'
	compileFlat    'com.opencsv:opencsv:5.12.0'
	compileFlat    'com.sun.xml.bind:jaxb-xjc:2.2.11'
	compileFlat    'commons-beanutils:commons-beanutils:1.11.0'
	compileFlat    'commons-collections:commons-collections:3.2.2'
	compileFlat    'commons-cli:commons-cli:1.10.0'
	compileFlat    'commons-fileupload:commons-fileupload:1.6.0'
	compileFlat    'commons-httpclient:commons-httpclient:3.1'
	compileFlat    'commons-io:commons-io:2.20.0'
	compileFlat    'commons-jxpath:commons-jxpath:1.4.0'
	compileFlat    'commons-lang:commons-lang:2.6'
	compileFlat    'io.swagger:swagger-models:1.6.16'
	compileFlat    'io.swagger:swagger-parser:1.0.75'
	compileFlat    'io.swagger.core.v3:swagger-annotations:2.2.35'
	compileFlat    'io.swagger.core.v3:swagger-models:2.2.35'
	compileFlat    'io.swagger.core.v3:swagger-core:2.2.35'
	compileFlat    'io.swagger.parser.v3:swagger-parser-core:2.1.34'
	compileFlat    'io.swagger.parser.v3:swagger-parser-v3:2.1.34'
	compileFlat    'javax.activation:activation:1.1.1'
	compileFlat    'javax.mail:mail:1.4.7'
	compileFlat    'org.slf4j:slf4j-ext:2.0.17'
	compileFlat    'org.slf4j:slf4j-simple:2.0.17'
	compileFlat    'oauth.signpost:signpost-core:2.1.1'
	compileFlat    'org.apache.axis2:axis2-saaj:1.6.2', { exclude module: 'servlet-api'}
	compileFlat    'org.dom4j:dom4j:2.2.0'
	compileFlat    'org.freemarker:freemarker:2.3.34'
	compileFlat    'org.apache.commons:commons-lang3:3.19.0'
	compileFlat    'org.apache.httpcomponents:httpclient:4.5.14'
	compileFlat    'org.apache.pdfbox:pdfbox:3.0.5'
	compileFlat    'org.apache.ws.commons.axiom:axiom-api:1.2.13'
	compileFlat    'org.apache.ws.commons.axiom:axiom-dom:1.2.13'
	compileFlat    'org.apache.ws.commons.axiom:axiom-impl:1.2.13'
	compileFlat    'org.apache.ws.commons.schema:XmlSchema:1.4.7'
	compileFlat    'org.bouncycastle:bcprov-jdk18on:1.81'
	compileFlat    'com.convertigo.lib:xmlbeans:2.6.0'
	compileFlat    'org.apache.xmlgraphics:fop:1.0', { exclude module: 'batik-js'}
	compileFlat    'org.codehaus.jettison:jettison:1.5.4'
	compileFlat    'org.eclipse.jgit:org.eclipse.jgit:7.3.0.202506031305-r'
	compileFlat    'org.eclipse.jgit:org.eclipse.jgit.ssh.apache:7.3.0.202506031305-r'
	compileFlat    'org.hibernate.orm:hibernate-core:7.1.1.Final'
	compileFlat    'org.mitre.dsmiley.httpproxy:smiley-http-proxy-servlet:2.0:javax'
	compileFlat    'org.mozilla:rhino:1.8.0'
	compileFlat    'org.mozilla:rhino-tools:1.8.0'
	compileFlat    'org.quartz-scheduler:quartz:2.5.0'
	compileFlat    'regexp:regexp:1.3'
	compileFlat    'wsdl4j:wsdl4j:1.6.3'
	compileFlat    'xalan:serializer:2.7.3'
	compileFlat    'xalan:xalan:2.7.3'
	compileFlat    'xerces:xercesImpl:2.12.2'
	compileFlat    'xml-resolver:xml-resolver:1.2'
	// runtime dependencies from here
	compileFlat    'com.convertigo.lib:qrcode:2011.05.19'
	compileFlat    'net.sf.jt400:jt400:11.2'
	compileFlat    'net.sourceforge.jtds:jtds:1.3.1'
	compileFlat    'org.hsqldb:hsqldb:2.7.4'
	compileFlat    'org.mariadb.jdbc:mariadb-java-client:3.5.6'
	compileFlat    'org.postgresql:postgresql:42.7.8'
	// end runtime dependencies
	compileFlat 'org.apache.tomcat.embed:tomcat-embed-core:' + tomcatVersion
	compileFlat 'org.apache.tomcat.embed:tomcat-embed-websocket:' + tomcatVersion
	compileFlat 'org.apache.tomcat:tomcat-dbcp:' + tomcatVersion
	//compileFlat    'org.apache.tomcat:tomcat-websocket:' + tomcatVersion
	implementation project.property('sapjco3Version')
	sapjco3        project.property('sapjco3Version')
	implementation files(dependenciesJar.archiveFile)
	runtimeOnly    project(path: ':placeholders', configuration: 'allPlaceholders')
}

task dependenciesSourceJar(type: Jar) {
	group = 'convertigo'
	
	def sourceConfig = configurations.create('sources')
	configurations.compileFlat.allDependencies.each { dependency ->
		if (dependency instanceof ExternalModuleDependency) {
			sourceConfig.dependencies.add(dependencies.create(
				group: dependency.group, 
				name: dependency.name, 
				version: dependency.version, 
				classifier: 'sources',
				ext: 'jar'
			))
		}
	}

	from {
		sourceConfig.incoming.artifactView {
			lenient(true) // ignore errors
		}.files.findAll { it.exists() && it.name.endsWith('sources.jar') }
		 .collect { zipTree(it) }
	}

	include '**/*.java'
	archiveBaseName = 'dependencies-sources'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task updateProductVersion {
	group = 'convertigo'
	
	inputs.property("convertigoVersion", convertigoVersion)
	inputs.property("convertigoTag", convertigoTag)
	inputs.property("convertigoRevision", convertigoRevision)
	
	outputs.file 'src/com/twinsoft/convertigo/engine/ProductVersion.java'
	
	doLast {
		def vers = convertigoVersion.split('\\.')
		def file = file 'src/com/twinsoft/convertigo/engine/ProductVersion.java'
		file.text = file.text
			.replaceFirst('(majorProductVersion = ).*;', "\$1\"${vers[0]}\";")
			.replaceFirst('(minorProductVersion = ).*;', "\$1\"${vers[1]}\";")
			.replaceFirst('(servicePack = ).*;', "\$1\"${vers[2]}\";")
			.replaceFirst('(tag = ).*;', '$1' + (convertigoTag.isEmpty() ? 'null;' : "\"${convertigoTag}\";"))
			.replaceFirst('(revision = ).*;', '$1' + (convertigoRevision.isEmpty() ? 'null;': "\"${convertigoRevision}\";"))
	}
}

task engineApiJar(type: Jar) {
	group = 'build'
	
	archiveBaseName = 'convertigo-engine-api'
	from 'bin/main'
	include '**/*.class'
	exclude 'com/twinsoft/convertigo/engine/parsers/**'
	exclude 'com/twinsoft/convertigo/engine/plugins/**'
	exclude 'com/twinsoft/convertigo/engine/providers/**'
}

task unzipSwaggerUI {
	group = 'convertigo'
	
	def zip = file "build/tmp/swagger-v${swaggerUiVersion}.zip"
	
	inputs.properties(
		'swaggerUiVersion': swaggerUiVersion
	)
	
	def patch = file '../eclipse-plugin-studio/tomcat/webapps/convertigo/swagger/patch'
	def dist = file '../eclipse-plugin-studio/tomcat/webapps/convertigo/swagger/dist'
	outputs.dir dist
	
	doLast {
		file('build/tmp').mkdirs()
		new URL("https://github.com/swagger-api/swagger-ui/archive/v${swaggerUiVersion}.zip").withInputStream{ i -> zip.withOutputStream{ it << i }}
		dist.delete()
		copy {
			from zipTree(zip)
			include '**/dist/*.png', '**/dist/*.html', '**/dist/*.css', '**/dist/*.js'
			includeEmptyDirs = false
			into dist
			eachFile { f ->
				f.path = f.path.replaceFirst('.*/', '')
			}
		}
		zip.delete()
		
		copy {
			from patch
			into dist
		}
	}
}

task copyLicense(type: Copy, dependsOn: [':checkLicenseDate']) {
	group = 'convertigo'
	
	from '../license.txt'
	into '../eclipse-plugin-studio/tomcat/webapps/convertigo/licenses'
}

task copyFlashUpdateDependencies(type: Copy) {
	group = 'convertigo'
	
	from '../eclipse-plugin-studio/tomcat/webapps/convertigo/scripts/jquery2.min.js'
	from('../eclipse-plugin-studio/tomcat/webapps/convertigo/css') {
		include 'flashupdate.css'
		include 'flashupdate_android.css'
		include 'flashupdate_ios.css'
		include 'flashupdate_fonts/**'
		include 'flashupdate_images/**'
	}
	into 'src/com/twinsoft/convertigo/engine/admin/services/mobiles/res'
}

task engineDependenciesClasspathJar(type: Jar, dependsOn: dependenciesJar) {
	group = 'convertigo'
	
	archiveAppendix = 'updateBeansDefaultValues'
	manifest {
		attributes 'Class-Path': files(sourceSets.main.compileClasspath, sourceSets.main.runtimeClasspath)
			.filter { it.name.endsWith '.jar' }
			.collect {it.toURI().toString().substring(5)}
			.join(' ')
	}
}

task updateBeansDefaultValues(type: JavaExec, dependsOn: engineDependenciesClasspathJar) {
	group = 'convertigo'
	
	inputs.files fileTree('src/com/twinsoft/convertigo/beans')
	outputs.file 'src/com/twinsoft/convertigo/beans/database_objects_default.xml'
	outputs.file 'src/com/twinsoft/convertigo/beans/mobile/components/dynamic/ion_objects_default.json'
	outputs.file 'src/com/twinsoft/convertigo/beans/ngx/components/dynamic/ion_objects_default.json'
	
	classpath sourceSets.main.output
	classpath engineDependenciesClasspathJar.archiveFile
	
	mainClass = 'com.twinsoft.convertigo.beans.BeansDefaultValues'
	
	args 'src', sourceSets.main.output.resourcesDir
}

task generateDocumentationMd(type: JavaExec, dependsOn: [engineDependenciesClasspathJar, updateBeansDefaultValues]) {
	group = 'convertigo'
	
	onlyIf {
		project.hasProperty('documentationPath')
	}
	if (project.hasProperty('documentationPath')) {
		def docPath = file(project.property('documentationPath'))
		def docMax = project.hasProperty('documentationMax') ? project.property('documentationMax') : -1
		println docPath
		inputs.files fileTree('src/com/twinsoft/convertigo/beans')
		outputs.dir docPath
		
		classpath sourceSets.main.output
		classpath engineDependenciesClasspathJar.archiveFile
		
		mainClass = 'com.twinsoft.convertigo.beans.BeansDoc'
		
		args docPath.absolutePath, docMax
	}
}

processResources.dependsOn('copyFlashUpdateDependencies')
compileJava.dependsOn(['copyLicense', 'copyFlashUpdateDependencies', 'updateProductVersion'])
processResources.dependsOn(':convertigo-svg-icons:run')
jar.dependsOn('updateBeansDefaultValues')