# Copyright (c) 2001-2025 Convertigo SA.
# 
# This program  is free software; you  can redistribute it and/or
# Modify  it  under the  terms of the  GNU  Affero General Public
# License  as published by  the Free Software Foundation;  either
# version  3  of  the  License,  or  (at your option)  any  later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS  FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program;
# if not, see <http://www.gnu.org/licenses/>.

display_name=CustomValidator
short_description=Defines a <i>CustomValidator</i> component. | The <i>CustomValidator</i> is a component which give you the ability to customize the validation for a given form input or for the whole form.\
<br/>Add a <i>CustomValidator</i> component under a <i>Form</i> or an input component such as <i>Text Input</i>.\
<br>Specify whether your validation function is asynchronous or not through the <i>Asynchronous</i> property of your <i>CustomValidator</i>.\
<br/>Double click on the validator to open the Typescript editor and write the required code for your validation function.\
<br>It has one parameter to allow you to access controls values:\
<br> \u2022 when validator is under a form:<br/><code>g:FormGroup</code> the form, use <code>g.get('&lt;control_name&gt;').value</code> to retrieve a control's value\
<br> \u2022 when validator is under a control:<br/><code>c:FormControl</code> the control, use <code>c.value</code> to retrieve control's value\
<br/>\
<br>For a synchronous validator, your validation function should return <code>null</code> when valid, otherwise it should return any <code>json</code> object filled with error informations.\
<br/>For an asynchronous validator, your validation function should return a typescript <code>Promise</code> as below:\
<pre><code>\
<br>function validate1502270851880(c: FormControl) {\
<br>/*Begin_c8o_function:validate1502270851880*/\
<br>	return new Promise(resolve => {\
<br>		//Fake a slow response from server\
<br>		setTimeout(() => {\
<br>		  if(c.value.toLowerCase() === "user"){\
<br>			resolve({\
<br>			  "username taken": true\
<br>			});\
<br>		  } else {\
<br>			resolve(null);\
<br>		  }\
<br>		}, 2000);\
<br>	});\
<br>/*End_c8o_function:validate1502270851880*/\
<br>}</code></pre>\
<br/>Also, you can add a <i>Submit Button</i> to your <i>Form</i> with its <code>Auto disable</code> property set to <code>true</code> to avoid form submission by disabling the button whenever form data are not valid.\
<br/>For more information: <a href='https://angular.io/guide/form-validation#reactive-form-validation' target='_blank'>Reactive form validation</a>.
property.validatorValue.display_name=Function content
property.validatorValue.short_description=Defines the content code of the validator function. |
