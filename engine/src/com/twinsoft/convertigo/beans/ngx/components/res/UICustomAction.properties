# Copyright (c) 2001-2025 Convertigo SA.
# 
# This program  is free software; you  can redistribute it and/or
# Modify  it  under the  terms of the  GNU  Affero General Public
# License  as published by  the Free Software Foundation;  either
# version  3  of  the  License,  or  (at your option)  any  later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS  FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program;
# if not, see <http://www.gnu.org/licenses/>.

display_name=CustomAction
short_description=Defines <i>CustomAction</i> action component. | This component helps you writing your own processing code.<br/>To edit code, double click the <i>CustomAction</i>. You are free to code in TypeScript any custom processing \
you want. Be sure to write your code between the<br /><code>/*Begin_c8o_function */<br />/*End_c8o_function */</code><br />delimiters.<br /><br />Custom actions can be inserted in an <i>Event</i> processing chain, \
combined with any other <i>Actions</i>. For example, you could have a <i>Camera</i> Action called when the user clicks on a button \
an you would like to process this action's output. To do this, place a <i>CustomAction</i> under the <i>Camera</i> action. This way, the <i>CustomAction</i> will be called <b>after</b> the <i>Camera</i> has \
finished (when the user clicks on ok to save the image...).<br /><br />\
When you finish processing in your CustomAction, you can call <code>resolve(data)</code> to pass control to the next CustomAction in the chain. The <code>data</code> object will be \
seen a the <code>parent.out</code> or <code>stack["ActionName"].out</code> object you can configure in the (TS) source of the next action in the chain.\
You can also call <code>reject(err)</code> to signal an error in the Custom Action processing. In this case, the <i>Failure Handler</i> or <i>Error Handler</i> error handler will be called. <br /><br />\
You can pass <i>Variable</i>s to any action. To do so, simply add <i>Variable</i> components under the <i>CustomAction</i>. You are free to associate \
the variable to any fixed text (<b>TX</b>) , TypeScript expression (<b>TS</b>), source (<b>SC</b>) and the value will be transmitted to the action.<br /><br />You can access the variables value in \
your custom action code by using : <br /><br /> \
<code>vars.myVariable</code> (where myVariable is the variable name)\
<br /><br /> \
You can call from <i>CustomAction</i> code any additional package available on NPM. To do so, simply configure the <i>Application packages</i> property with a NPM Package and version number, and  \
configure the <i>Page Imports</i> property to declare all the packages import you will need. This will automatically insert TypeScript 'Import' statements in the page where the <i>CustomAction</i> is used. \
If you want to use use one the imported classes, you may have to get an Instance of it. To do so, you can use the CAF utility method <code>this.getInstance(Class)</code>.<br /><br /> \
Some NPM packages may require also additional module declarations. To do so, configure the <i>Application modules</i> property, the <i>Application providers</i> property and the <i>Application imports</i> property. \
This will insert automatically the module \
to the app.module.ts file in the @NgModule 'imports' or 'provider' arrays, and add an 'Import' TypeScript statement in the file header. <br /><br /> \
Some other NPM packages may also require an Additional Cordova plugin. (For example ionic Native packages). You can also declare these plugins in the <i>Application plugins</i> property. This will cause \
Convertigo Studio to automatically add the plugin to the project's Cordova Config.xml file.<br /><br /> \
<i>CustomAction</i>s are also a great way to add some additional NPM packages to your projects, even if you do not write some code in the <i>CustomAction</i> itself, but in any other place (Page class, (TS) mode binding...)
property.actionValue.display_name=Action code
property.actionValue.short_description=Defines the action code. |
property.page_ts_imports.display_name=Local component imports
property.page_ts_imports.short_description=Defines the imports needed by this action. | Add here any 'Import' statements your code would require to compile.
property.local_module_ts_imports.display_name=Local module imports
property.local_module_ts_imports.short_description=Defines the imports needed by this action. | Add here any 'Import' statements needed in the page.module.ts or comp.module.ts
property.local_module_ng_imports.display_name=Local module NgModules
property.local_module_ng_imports.short_description=Defines the modules needed by this action. | Add here any module to be inserted in the @NgModule({Imports[]}) in the page.module.ts or comp.module.ts
property.local_module_ng_providers.display_name=Local module NgProviders
property.local_module_ng_providers.short_description=Defines the providers needed by this action. | Add here any provider to be inserted in the @NgModule({Providers[]}) in the page.module.ts or comp.module.ts
property.module_ts_imports.display_name=Application module imports
property.module_ts_imports.short_description=Defines the imports needed by this action. | Add here any 'Import' statements needed in the app.module.ts
property.module_ng_imports.display_name=Application module NgModules
property.module_ng_imports.short_description=Defines the modules needed by this action. | Add here any module to be inserted in the @NgModule({Imports[]}) in app.module.ts
property.module_ng_providers.display_name=Application module NgProviders
property.module_ng_providers.short_description=Defines the providers needed by this action. | Add here any provider to be inserted in the @NgModule({Providers[]}) in app.module.ts
property.package_dependencies.display_name=Application packages
property.package_dependencies.short_description=Defines the packages needed by this action. | Add here any NPM Package needed by you code. They will be automatically added to the app's Packages.json
property.cordova_plugins.display_name=Application plugins
property.cordova_plugins.short_description=Defines the plugins needed by this action. | Add here any additional Cordova plugin your code needs (Ex ion native Packages).
property.build_assets.display_name=Application assets
property.build_assets.short_description=Defines the assets needed by this action. | Add here any additional json to be inserted in the app:architect:build:option:assets[] of angular.json (Ex {"glob": "**/*", "input": "node_modules/tinymce", "output": "/tinymce/"})
property.build_scripts.display_name=Application scripts
property.build_scripts.short_description=Defines the scripts needed by this action. | Add here any additional path to script file needed by your code
property.build_styles.display_name=Application styles
property.build_styles.short_description=Defines the styles needed by this action. | Add here any additional path to scss file needed by your code