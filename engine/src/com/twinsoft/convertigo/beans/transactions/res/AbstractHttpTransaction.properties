# Copyright (c) 2001-2025 Convertigo SA.
# 
# This program  is free software; you  can redistribute it and/or
# Modify  it  under the  terms of the  GNU  Affero General Public
# License  as published by  the Free Software Foundation;  either
# version  3  of  the  License,  or  (at your option)  any  later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS  FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program;
# if not, see <http://www.gnu.org/licenses/>.

property.httpInfo.display_name=HTTP info
property.httpInfo.short_description=Defines whether to include HTTP information in output XML. | \
 <p>HTTP information can be added to the transaction's output XML, such as the request URL, HTTP status code and the HTTP request and response headers. You can also have the raw HTTP data in case of error.</p>\
 <p>The <b>HTTP info</b> property allows to define whether these information have to be inserted in the transaction's output XML (value set to <code>true</code>) or not (value set to <code>false</code>).</p>\
 <p>Default value is <code>false</code>.</p>
property.httpInfoTagName.display_name=HTTP info tagname
property.httpInfoTagName.short_description=Defines the tagname of the element containing the HTTP info in output XML. | \
 <p>When the <b>HTTP info</b> property defines to insert the HTTP information in the transaction's output XML, the <b>HTTP info tagname</b> property allows the programmer to define the tagname of the element containing these information.</p>\
 <p>Default value is <code>HttpInfo</code>.</p>
property.httpVerb.display_name=HTTP verb
property.httpVerb.short_description=Defines the HTTP verb to use for this HTTP request: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>TRACE</code>, <code>OPTIONS</code> or <code>CONNECT</code>. | \
 <p>For more information about HTTP verbs, you can visit the following RFC page: <i>http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html</i>.</p>
property.subDir.display_name=Sub path
property.subDir.short_description=Defines the end of the path for the HTTP connection. | \
 <p>This property allows to define the sub path, relative to the connector root path, to the target web service URI.</p>\
 <p>For example, if the target is: <code>http://server/MyApp/targetpage.jsp</code>, the connector server would be: <code>server</code>, the connector root path: <code>/MyApp</code> and the transaction sub path: <code>/targetpage.jsp</code>.</p>\
 <p>The transaction sub path can be parameterized with the transaction's variables, to be dynamically configured at runtime with variable values. To use transaction variables in the sub path, use following syntaxe:</p>\
 <ul>\
  <li>the simple-brace notation - variable name surrounded by curly braces : <code>/subdir/{variable_name}.jsp</code>.</li>\
 </ul>
property.handleCookie.display_name=Handles cookies
property.handleCookie.short_description=Defines whether cookies must be handled. | \
 <p>If set to <code>true</code> (default value), the transaction maintains cookies in Convertigo's context. Default value should not be changed unless you specifically want the transaction to ignore cookies while browsing.</p>
property.httpParameters.display_name=HTTP headers
property.httpParameters.short_description=Defines HTTP headers to be sent. | \
 <p>This property allows to define the request Header Fields to be sent with the request to the target web service method.</p>\
 <p>For each header, two columns have to be set:</p>\
 <ul>\
  <li><b>Variable</b>: HTTP header name (ex: <code>Content-Type</code>).</li>\
  <li><b>Value</b>: HTTP header value (ex: <code>application/x-www-from-urlencoded</code>).</li>\
 </ul>\
 <p>The "Content-Type" header of this property can be overridden with a __contentType variable.</p>\
 <p><strong>Note:</strong> A new HTTP header can be added to the list using the blue keyboard icon. The HTTP headers defined in the list can be ordered using the arrow up and arrow down buttons, or deleted using the red cross icon.</p>
#property.httpVariables.display_name=HTTP variables
#property.httpVariables.short_description=Defines conversions between transaction variables and HTTP variables required by the target server. | \
 <p>Transaction input variables. Each input variable has its own set of properties: #</p>\
 <ul>\
  <li>Variable: Variable name.</li>\
 </ul>\
 <p># • Description: Variable description.</p>\
 <p># • Default value: Variable default value if no input value is sent to the transaction.</p>\
 <p># • WSDL: If set to <code>true</code>, includes this variable in the generated SOAP WSDL as an input variable for this method (transaction) of the webservice.</p>\
 <p># • Multi: Multi valued variables can be input more than once per request. Also, they are inserted into the transaction as JavaScript arrays, instead of strings.</p>\
 <p># • Personalizable: When adding this transaction as a widget in Convertigo Mashup Composer, personalizable variables are added to the widget as user preferences.</p>\
 <p># • Cached key: When considering cache usage to serve a request, Convertigo only compares cached key variables between the new request and the cached one to determine whether cache should be used or not.</p>\
 <p># • Method: HTTP method to be used for this variable if the transaction connector is to auto-connect (i.e. when <b>Maintain connector state</b> is false) and if an HTTP variable name is defined for this variable.</p>\
 <p># • HTTP variable: If an HTTP variable name is defined, then this variable value is sent as an HTTP variable upon connector auto-connect (see <b>Maintain connector state</b> parameter).</p>
property.requestTemplate.display_name=Request template
property.requestTemplate.short_description=Defines the request body template file path. | \
 <p>HTTP request sent by the transaction can contain data in its body. This data is based on a user-defined template file, which can be:</p>\
 <ul>\
  <li>an XML file describing the content of the HTTP request body, possibly including transaction input variables in the data structure,</li>\
  <li>an XSL file used to transform the variable-based transaction input XML to generate the content of the HTTP request body.</li>\
 </ul>\
 <p>This property allows to define the path of the template file, it is either:</p>\
 <ul>\
  <li>a local file, by default relative to the project's directory, or to the project's current subfolder,</li>\
  <li>a local file relative to the Convertigo webapp common <code>templates</code> directory,</li>\
  <li>an absolute path.</li>\
 </ul>\
 <p>If the template file is an XML file, it can contain transaction variables identified with a specific syntax in the XML and dynamically replaced at runtime with received variable values.</p>\
 <p>The syntax to use in the XML template file to refer to a transaction variable is the following:</p>\
 <ul>\
  <li><code>$(&lt;variableHttpName&gt;)</code>: this simple notation starts with a <code>$</code> character and then includes between brackets the <b>HTTP name</b> of the variable. Beware that the <b>HTTP name</b> of the variable can be different from the variable name (see <i>Variable</i> objects documentation).</li>\
  <li><code>$(&lt;variableHttpName&gt;)concat</code>: this notation is very similar to the preceding, excepted that the last bracket is followed by the <code>concat</code> keyword. It starts by a <code>$</code> character and includes between brackets the <b>HTTP name</b> of the variable, that should be in this case a <i>Multi-valued variable</i>. The <code>concat</code> keyword implies that all values received in the <i>Multi-valued variable</i> must be concatenated before replacing this notation by this computed value in the template XML.</li>\
  <li><code>$(&lt;variableHttpName&gt;)</code>: this notation is identical to the first notation, but the behavior is different for a <i>Multi-valued variable</i>. The tag surrounding this notation in the template XML is duplicated for each value in the <i>Multi-valued variable</i>.</li>\
 </ul>
property.urlEncodingCharset.display_name=URL charset encoding
property.urlEncodingCharset.short_description=Defines the charset encoding to use for the variable values sent as parameters in HTTP request. | \
 <p>This property allows to define the charset encoding used to URL-encode the parameter values:</p>\
 <ul>\
  <li>GET parameters for the query string,</li>\
  <li>POST parameters in case of <code>application/x-www-form-urlencoded</code> content-type.</li>\
 </ul>\
 <p>Default value is blank. If blank, the parent connector's <b>Default URL charset encoding</b> property value is used.</p>
property.customHttpVerb.display_name=Custom HTTP verb
property.customHttpVerb.short_description=Defines a custom HTTP verb that override the HTTP verb selected. | \
 <p>This property allows to override the verb of <code>HTTP verb</code> but inherit its behavior. Does nothing if empty.</p>
property.httpPool.display_name=HTTP Pool
property.httpPool.short_description=Defines the HTTP pool policy for connection reuse. | \
 <p>Possible values:</p>\
 <ul>\
  <li><b>no</b>: create a new connection for each request</li>\
  <li><b>context</b>: pool connection for the current <code>convertigo context</code></li>\
  <li><b>session</b>: pool connection for the current <code>http session</code></li>\
  <li><b>global</b>: pool connection for the whole server</li>\
 </ul>\
 <p>Default value is <code>global</code>.</p>
property.allowDownloadAttachment.display_name=Allow Download Attachment
property.allowDownloadAttachment.short_description=Defines if files of multipart response must be written. | \
 <p>If the property is true, the attachments are written on temporary files. In SOAP, create an &lt;attachment&gt; tag for each attachment directly under the corresponding &lt;xop:Include&gt; element.</p>
property.followRedirect.display_name=Follow Redirect
property.followRedirect.short_description=Defines if the transaction automatically follow the redirect. | \
 <p>If the property is true, a new request is done to the new URL defined by the <code>Location</code> header. If the property is false and a redirect occurs, the result will be empty so we recommend to enable the <code>HttpInfo</code> property.</p>
