# Copyright (c) 2001-2025 Convertigo SA.
# 
# This program  is free software; you  can redistribute it and/or
# Modify  it  under the  terms of the  GNU  Affero General Public
# License  as published by  the Free Software Foundation;  either
# version  3  of  the  License,  or  (at your option)  any  later
# version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;  without even the implied warranty of
# MERCHANTABILITY  or  FITNESS  FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program;
# if not, see <http://www.gnu.org/licenses/>.

display_name=SQL transaction
short_description=Defines an SQL transaction. | An <i>SQL transaction</i> allows Convertigo to execute a request on an SQL database, which is accessed by the parent <i>SQL connector</i>. <br/>\
An <i>SQL transaction</i> is always associated with an SQL query, or several SQL queries, defined in the <b>Query</b> property. The query/queries can be dynamically configured using the transaction's variables (see <b>Query</b> property description and <i>Variable</i> objects documentation). <br/>\
The resultset is output in transaction's XML response in an <span class="computer">sql_output</span> element. The data organization in the <span class="computer">sql_output</span> element depends on the <b>Output mode</b> property. <br/>\
In case of multiple queries, the several queries are sequentially executed, using auto-commit mode defined in <b>Auto-commit</b> property. Each query's resultset is output in transaction's XML response in <span class="computer">sql_output</span> elements. The data organization in <span class="computer">sql_output</span> elements depends on the <b>Output mode</b> property and is the same for all queries of the transaction.
property.sqlQuery.display_name=Query
property.sqlQuery.short_description=Defines the SQL query/queries to execute on the target database. | The <b>Query</b> property allows to define an SQL query or several SQL queries to be executed on the target database. Any SQL query must be written in accordance with the target database tables and available functions and keywords (depending on the parent <i>SQL connector</i> configuration). <br/>\
The SQL query/queries can be parameterized with the transaction's variables, to be dynamically configured at runtime with variable values. To use a transaction variable in an SQL query, use one of the following syntaxes in the query: \
<br/><br/>\
 \u2022 <span class="computer">{variable_name}</span>: the simple-brace notation - variable name surrounded by curly braces - protects the SQL query from SQL injections, i.e. only the first value represented by the variable is used, discarding any further content (SQL injection). It works so that the variable only contains a value. This notation can only be used inside the <span class="computer">WHERE</span> clause. If you need to use a variable anywhere else inside the SQL query, you should use the double-brace notation. <br/>\
 \u2022 <span class="computer">{{variable_name}}</span>: the double-brace notation - variable name surrounded by double curly braces - does not protect the SQL query from SQL injections, i.e. the variable content can contain any content. If the variable value contains a piece of SQL query, it will not prevent the SQL query execution. This may be useful when a whole <span class="computer">WHERE</span> clause is computed outside the transaction (at sequence level for example) and passed as a variable to the SQL transaction. It should also be used when variables need to be used in the query outside of the <span class="computer">WHERE</span> clause. <br/>\
<br/>\
In the case of multiple SQL queries, they must be separated by semicolons ';'. <br/>\
<span class="orangetwinsoft">Notes:</span> \
<br/><br/>\
 \u2022 In the case of multiple SQL queries, you cannot use the <b>Optional max number of results</b> property in this case. <br/>
property.xmlOutput.display_name=Output mode
property.xmlOutput.short_description=Defines how the resulting XML is generated from each SQL query result. | The <b>Output mode</b> property allows to change the structure of generated XML for a same query result. It can be set to one of the following values: \
<br/><br/>\
 \u2022 <span class="computer">RAW</span>: generates a <span class="computer">row</span> element for each result line, selected columns are added as attributes named after the column names. Note that as the columns are XML attributes, they are sorted by alphabetical order under the <span class="computer">row</span> element. <br/>\
 \u2022 <span class="computer">AUTO</span>: generates a mix of complex elements and elements with attributes (interesting for multi-table requests). <br/>\
 \u2022 <span class="computer">ELEMENT</span>: generates XML elements named after table names, selected columns are added as child XML elements named after column name. In case of multi-table requests, one row is a complex element which depth depends on the number of selected tables. Note that as the columns are XML elements, they are sorted in the order requested in the query and as the resultset has returned data. <br/>\
 \u2022 <span class="computer">ELEMENT_WITH_ATTRIBUTES</span>: generates a structure similar to the <span class="computer">ELEMENT</span> output mode but with <span class="computer">row</span> and <span class="computer">column</span> tag names. Each element (row or column) contains a <span class="computer">name</span> attribute with the actual name of the selected table or column (useful when table or column names contain symbols not allowed in XML tag names, or start by a number, etc.). <br/>\
 \u2022 <span class="computer">FLAT_ELEMENT</span>: generates a structure similar to the <span class="computer">RAW</span> output mode but with elements instead of attributes. Each result line generates a <span class="computer">row</span> element, selected columns are added as child XML elements named after the column names. Note that as the columns are XML elements, they are sorted in the order requested in the query and as the resultset has returned data.<br/>
property.xmlGrouping.display_name=XML grouping
property.xmlGrouping.short_description=Defines whether the resulting XML should be grouped by elements. | Default value is <span class="computer">false</span>. Setting it to <span class="computer">true</span> enables the grouping of XML elements in the transaction's XML response. The behavior can be different depending on the <b>Output mode</b> property value. 
property.maxResult.display_name=Optional max number of results
property.maxResult.short_description=Defines the maximum number of results returned by the SQL query. | Setting this property automatically adds a <span class="computer">LIMIT xx</span> at the end of the query before its execution on the database. It allows limiting automatically the number of results of every execution of one query. <br/>\
<span class="orangetwinsoft">Notes:</span> \
<br/><br/>\
 \u2022 Beware that this property should be used only when the target SQL database allows the <span class="computer">LIMIT</span> keyword in the queries. To know which type of database is accessed by the transaction, refer to the <b>Driver</b> property of parent <i>SQL connector</i>. <br/>\
 \u2022 Beware that this property cannot be used when the <b>Query</b> property contains several queries.<br/>
property.autoCommit.display_name=Auto-commit
property.autoCommit.short_description=Defines the commit mode, to be automatic or not. | The <b>Auto-commit</b> property can take one of the following values: \
<br/><br/>\
 \u2022 <span class="computer">enabled, after each query</span>: auto-commit is done after executing each query from the <b>Query</b> property, <br/>\
 \u2022 <span class="computer">enabled, once at the end</span>: auto-commit is done after executing all queries from the <b>Query</b> property, <br/>\
 \u2022 <span class="computer">disabled, manual commit</span>: the developer should program himself the commits to the database thanks to <span class="computer">COMMIT</span> statement. <br/>\
<br/>\
Default value is <span class="computer">enabled, after each query</span>, enabling auto-commit after each query execution. <br/>\
<span class="orangetwinsoft">Notes:</span> \
<br/><br/>\
 \u2022 Not all databases support "grouped transactions" and "rollback". To use this property, be sure that your target database supports these features. Otherwise, the auto-commit is always applied. <br/>
property.xmlDefaultRowTagname.display_name=Default XML row tag name
property.xmlDefaultRowTagname.short_description=Defines the default row tag name to output in XML response, depending on the <b>Output mode</b> property. | This property allows to configure a tag name for each line of result, depending on the <b>Output mode</b> property. <br/>\
Default value is <span class="computer">row</span>.
property.xmlDefaultColumnTagname.display_name=Default XML column tag name
property.xmlDefaultColumnTagname.short_description=Defines the default column tag name to output in XML response, depending on the <b>Output mode</b> property. | This property allows to configure a tag name for each column of result, depending on the <b>Output mode</b> property. <br/>\
Default value is <span class="computer">column</span>.
property.generateJsonTypes.display_name=Generate JSON type
property.generateJsonTypes.short_description=Add "type" attributes to respect JSON types for the .json requester. | This property will add "type" and "originalKeyName" attributes on XML response. The <span class="computer">FLAT_ELEMENT</span> is the recommended mode, other modes will just add the array support for rows. 
